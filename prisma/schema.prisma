generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id
  email        String         @unique
  name         String
  role         Role
  created_at   DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  lastLogin    DateTime       @default(now())
  drugIssuance DrugIssuance[]
  leaves       Leave[]
  stockUpdate  StockUpdate[]
}

model Patient {
  id                       String           @id @default(uuid())
  first_name               String
  last_name                String
  date_of_birth            DateTime
  gender                   Gender           @default(MALE)
  phone                    String
  email                    String           @unique
  marital_status           String
  address                  String
  emergency_contact_name   String
  emergency_contact_number String
  relation                 String
  blood_group              String?
  allergies                String?
  medical_conditions       String?
  medical_history          String?
  insurance_provider       String?
  insurance_number         String?
  privacy_consent          Boolean
  service_consent          Boolean
  medical_consent          Boolean
  img                      String?
  colorCode                String?
  physician_id             String?
  created_at               DateTime         @default(now())
  updated_at               DateTime         @updatedAt
  appointments             Appointment[]
  drugsIssuance            DrugIssuance[]
  labTest                  LabTest[]
  medical                  MedicalRecords[]
  primaryPhysician         Doctor?          @relation("PrimaryPhysician", fields: [physician_id], references: [id])
  payments                 Payment[]
  prescriptions            Prescription[]
  ratings                  Rating[]
}

model Doctor {
  id                  String         @id @default(uuid())
  email               String         @unique
  name                String
  specialization      String
  license_number      String
  phone               String
  address             String
  department          String?
  img                 String?
  colorCode           String?
  availability_status String?
  type                JOBTYPE        @default(FULL)
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  appointments        Appointment[]
  diagnosis           Diagnosis[]
  patients            Patient[]      @relation("PrimaryPhysician")
  prescriptions       Prescription[]
  ratings             Rating[]
  working_days        WorkingDays[]
}

model WorkingDays {
  id         Int      @id @default(autoincrement())
  doctor_id  String
  day        String
  start_time String
  close_time String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  doctor     Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
}

model Staff {
  id             String   @id
  email          String   @unique
  name           String
  phone          String
  address        String
  department     String?
  img            String?
  license_number String?
  colorCode      String?
  role           Role
  status         Status   @default(ACTIVE)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model Appointment {
  id               Int               @id @default(autoincrement())
  patient_id       String
  doctor_id        String
  appointment_date DateTime
  time             String
  status           AppointmentStatus @default(PENDING)
  type             String
  note             String?
  reason           String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  doctor           Doctor            @relation(fields: [doctor_id], references: [id])
  patient          Patient           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  medical          MedicalRecords[]
  bills            Payment[]
}

model Payment {
  id             Int              @id @default(autoincrement())
  patient_id     String
  appointment_id Int
  bill_date      DateTime         @default(now())
  payment_date   DateTime         @default(now())
  discount       Float            @default(0)
  total_amount   Float            @default(0)
  amount_paid    Float            @default(0)
  payment_method PaymentMethod    @default(CASH)
  status         PaymentStatus    @default(UNPAID)
  receipt_number Int              @default(autoincrement())
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  bills          PatientBills[]
  appointment    Appointment      @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient        Patient          @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  payments       PaymentDetails[]
}

model PaymentDetails {
  id         Int           @id @default(autoincrement())
  payment_id Int
  amount     Float
  method     PaymentMethod @default(CASH)
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
  payment    Payment       @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}

model PatientBills {
  id           Int      @id @default(autoincrement())
  service_name String
  service_date DateTime @default(now())
  quantity     Int
  unit_cost    Float
  total_cost   Float
  payment_id   Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  payment      Payment  @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}

model LabTest {
  id             Int            @id @default(autoincrement())
  record_id      Int
  patient_id     String
  test_date      DateTime?
  result         String?
  resultNote     String?
  status         TestStatus     @default(PENDING)
  notes          String?
  service_id     Int
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  patient        Patient        @relation(fields: [patient_id], references: [id])
  medical_record MedicalRecords @relation(fields: [record_id], references: [id], onDelete: Cascade)
  services       Services       @relation(fields: [service_id], references: [id])
}

model MedicalRecords {
  id             Int          @id @default(autoincrement())
  patient_id     String
  appointment_id Int
  doctor_id      String
  treatment_plan String?
  lab_request    String?
  notes          String?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  diagnosis      Diagnosis[]
  lab_test       LabTest[]
  appointment    Appointment  @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient        Patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  vital_signs    VitalSigns[]
}

model VitalSigns {
  id                Int            @id @default(autoincrement())
  patient_id        String
  medical_id        Int
  body_temperature  Float
  systolic          Int
  diastolic         Int
  heartRate         String
  respiratory_rate  Int?
  oxygen_saturation Int?
  weight            Float
  height            Float
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  medical           MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
}

model Diagnosis {
  id                     Int            @id @default(autoincrement())
  patient_id             String
  medical_id             Int
  doctor_id              String
  symptoms               String
  diagnosis              String
  notes                  String?
  prescribed_medications String?
  follow_up_plan         String?
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  doctor                 Doctor         @relation(fields: [doctor_id], references: [id])
  medical                MedicalRecords @relation(fields: [medical_id], references: [id], onDelete: Cascade)
  prescriptions          Prescription[]
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  user_id    String
  record_id  String
  action     String
  details    String?
  model      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Rating {
  id         Int      @id @default(autoincrement())
  staff_id   String
  patient_id String
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  patient    Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor     Doctor   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
}

model Services {
  id          Int        @id @default(autoincrement())
  name        String
  category    String
  description String?
  department  Department @default(GENERAL)
  price       Float
  tat         Int?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  labTests    LabTest[]
}

model Notification {
  id         Int      @id @default(autoincrement())
  user_id    String
  title      String
  date       DateTime @default(now())
  message    String
  isRead     Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Leave {
  id                Int         @id @default(autoincrement())
  startDate         DateTime
  endDate           DateTime
  type              LeaveType
  reason            String
  status            LeaveStatus @default(PENDING)
  rejectionReason   String?
  modifiedStartDate DateTime?
  modifiedEndDate   DateTime?
  created_at        DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  userId            String
  user              User        @relation(fields: [userId], references: [id])
}

model Prescription {
  id          Int                @id @default(autoincrement())
  patientId   String
  doctorId    String
  notes       String?
  status      PrescriptionStatus @default(PENDING)
  diagnosisId Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  issuance    DrugIssuance?
  drugs       PrescribedDrug[]
  diagnosis   Diagnosis          @relation(fields: [diagnosisId], references: [id], onDelete: Cascade)
  doctor      Doctor             @relation(fields: [doctorId], references: [id])
  patient     Patient            @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([doctorId])
  @@index([status])
}

model PrescribedDrug {
  id             String       @id @default(uuid())
  prescriptionId Int
  drugId         String
  quantity       Int
  instructions   String?
  frequency      String?
  duration       Int?
  drug           Drug         @relation(fields: [drugId], references: [id])
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)

  @@index([prescriptionId])
  @@index([drugId])
}

model Drug {
  id            String           @id @default(uuid())
  name          String
  batchNumber   String
  manufacturer  String
  expiryDate    DateTime
  quantity      Int
  pricePerUnit  Float
  category      DrugCategory
  description   String?
  created_at    DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  issuances     IssuedDrug[]
  prescriptions PrescribedDrug[]
  purchases     PurchasedDrug[]
  stockUpdates  StockUpdate[]
}

model StockUpdate {
  id               String          @id @default(uuid())
  drugId           String
  previousQuantity Int
  newQuantity      Int
  type             StockUpdateType @default(ISSUANCE)
  userId           String
  notes            String?
  updatedAt        DateTime        @default(now())
  drug             Drug            @relation(fields: [drugId], references: [id])
  updatedBy        User            @relation(fields: [userId], references: [id])
}

model DrugIssuance {
  id             String       @id @default(uuid())
  patientId      String
  prescriptionId Int          @unique
  pharmacistId   String
  issuedAt       DateTime     @default(now())
  totalCost      Float
  patient        Patient      @relation(fields: [patientId], references: [id])
  pharmacist     User         @relation(fields: [pharmacistId], references: [id])
  prescription   Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  drugs          IssuedDrug[]

  @@index([patientId])
  @@index([prescriptionId])
}

model IssuedDrug {
  id           String       @id @default(uuid())
  issuanceId   String
  drugId       String
  quantity     Int
  pricePerUnit Float
  drug         Drug         @relation(fields: [drugId], references: [id])
  issuance     DrugIssuance @relation(fields: [issuanceId], references: [id])

  @@index([issuanceId])
  @@index([drugId])
}

model Invoice {
  id           String          @id @default(uuid())
  providerName String
  purchaseDate DateTime
  totalCost    Float
  status       InvoiceStatus   @default(PENDING)
  created_at   DateTime        @default(now())
  drugs        PurchasedDrug[]

  @@index([purchaseDate])
  @@index([status])
}

model PurchasedDrug {
  id           String  @id @default(uuid())
  invoiceId    String
  drugId       String
  quantity     Int
  pricePerUnit Float
  drug         Drug    @relation(fields: [drugId], references: [id])
  invoice      Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
  @@index([drugId])
}

enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  LABORATORY
  PATIENT
  CASHIER
  PHARMACY
  ACCOUNT
  USER
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART
}

enum Gender {
  MALE
  FEMALE
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
  OTHER
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TestStatus {
  PENDING
  CANCELLED
  COMPLETED
}

enum Department {
  GENERAL
  LABORATORY
}

enum PrescriptionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum DrugCategory {
  ANTIBIOTICS
  PAINKILLERS
  ANTIVIRAL
  CARDIOVASCULAR
  RESPIRATORY
  OTHER
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  RECEIVED
}

enum StockUpdateType {
  RESTOCK
  ISSUANCE
}


model Product {
  id                     String   @id @default(cuid())
  productName            String
  priceInCedis           Float
  description            String?
  stockStatus            String   @default("AVAILABLE") 
  updatedAt             DateTime @default(now())  
  isAvailableForPurchase Boolean
  imagePath              String?
  createdAt             DateTime @default(now())
  orders                 Order[]
}





model NormalUser {
id            String          @id @default(uuid())
email         String         @unique
role          Role
createdAt                 DateTime     @default(now())
updatedAt                 DateTime     @updatedAt 
orders   Order[]

}


model Order {
id                  String          @id @default(uuid())
pricePaidInCedis    Int
createdAt           DateTime        @default(now())
updatedAt           DateTime        @updatedAt

userId              String
productId           String
user NormalUser     @relation(fields: [userId], references: [id], onDelete: Cascade)
product Product     @relation(fields: [productId], references: [id], onDelete: Restrict)
}